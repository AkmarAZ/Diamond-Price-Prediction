import numpy as np
import pandas as pd

dataset = pd.read_csv('diamonds.csv')
dataset.values
X = dataset.iloc[:,1:11].values
X = np.delete(X, 6, 1)  
y = dataset.iloc[:, 6].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
label_cut = LabelEncoder()
label_color = LabelEncoder()
label_clarity = LabelEncoder()


X[:,1] = label_cut.fit_transform(X[:,1])
X[:,2] = label_color.fit_transform(X[:,2])
X[:,3] = label_clarity.fit_transform(X[:,3])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 12345)

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler()
X_train=sc.fit_transform(X_train)
y_train=np.reshape(y_train,(len(y_train),1))
y_train = sc.fit_transform(y_train)

model=tf.keras.Sequential()

model.add(tf.keras.layers.InputLayer(input_shape=X.shape[1],))
model.add(tf.keras.layers.Dense(128, activation='relu')) 
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(32, activation='relu'))

model.add(tf.keras.layers.Flatten())


model.add(tf.keras.layers.Dense(1,activation='sigmoid'))

model.summary()
#%%

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
#%%
history=model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=8, epochs=10)

X_test=sc.fit_transform(X_test)
X_test=np.reshape(X_test, (len(X_test),9,1))
y_test=np.reshape(y_test,(len(y_test),1))
y_test = sc.fit_transform(y_test)
predicted_price=regressor.predict(X_test)
len(predicted_price[0])
1
plt.plot(y_test,color='red',label='real diamond price')
plt.plot(predicted_price,color='blue',label='predicted diamond price')
plt.title('Diamond Price Prediction')
plt.xlabel('Parameters')
plt.ylabel('Diamond Price')
plt.legend()
plt.show()
